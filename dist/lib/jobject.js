// Generated by CoffeeScript 1.4.0
(function() {
  var Jobject;

  Jobject = (function() {

    function Jobject() {}

    Jobject.capitalizeFirstLetter = function(string) {
      return string.charAt(0).toUpperCase() + string.slice(1);
    };

    Jobject.invalidPropertyName = function(name) {
      return Error('Invalid property name: ' + name);
    };

    Jobject.regex = {
      invalidPropertyName: /(^\d|\s|[^A-Za-z0-9$_])/g
    };

    Jobject.prototype.property = function(name, intitialValue) {
      var privateName, proto, setterName;
      if (!this.validPropertyName(name)) {
        throw new Jobject.invalidPropertyName(name);
      }
      privateName = this.createPrivateName(name);
      this.addPrivateProperty(privateName, intitialValue);
      setterName = this.createSetterName(name);
      proto = Object.getPrototypeOf(this);
      return Object.defineProperty(proto, name, {
        get: this.createGetter(name, privateName),
        set: this.createSetter(setterName, privateName)
      });
    };

    Jobject.prototype.createGetter = function(name, privateName) {
      if (!(this[name] === void 0)) {
        return this[name];
      } else {
        return function() {
          return this[privateName];
        };
      }
    };

    Jobject.prototype.createSetter = function(setterName, privateName) {
      if (!(this[setterName] === void 0)) {
        return this[setterName];
      } else {
        return function(value) {
          return this[privateName] = value;
        };
      }
    };

    Jobject.prototype.addSetter = function(setterName, privateName) {
      if (!(this[setterName] === void 0)) {
        return;
      }
      return this[setterName] = function(arg) {
        return this[privateName] = arg;
      };
    };

    Jobject.prototype.addPrivateProperty = function(name, intitialValue) {
      if (intitialValue === void 0) {
        intitialValue = null;
      }
      return this[name] = intitialValue;
    };

    Jobject.prototype.createSetterName = function(name) {
      return 'set' + Jobject.capitalizeFirstLetter(name);
    };

    Jobject.prototype.createPrivateName = function(name) {
      return '_' + name;
    };

    Jobject.prototype.validPropertyName = function(name) {
      var validPropertyName;
      validPropertyName = false;
      if (!name.match(Jobject.regex.invalidPropertyName)) {
        validPropertyName = true;
      }
      return validPropertyName;
    };

    return Jobject;

  })();

  module.exports = Jobject;

}).call(this);
